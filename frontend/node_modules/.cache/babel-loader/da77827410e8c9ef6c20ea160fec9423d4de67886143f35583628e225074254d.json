{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yi Tao\\\\Documents\\\\GitHub\\\\WorkSync-Orbital\\\\frontend\\\\src\\\\context\\\\ChatContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const chatReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_DIRECT':\n      return {\n        ...state,\n        directTarget: action.payload\n      };\n    case 'SET_CHANNELS':\n      return {\n        ...state,\n        channels: action.payload,\n        isRecent: action.isRecent\n      };\n    case 'UPDATE_CHANNEL':\n      var updated = [...state.channels];\n      let index = state.channels.findIndex(channel => channel._id == action.payload._id);\n      if (index == -1 && action.payload.type == \"direct\") {\n        index = state.channels.findIndex(channel => {\n          let found = 0;\n          channel.participants.forEach(p1 => {\n            action.payload.participants.forEach(p2 => {\n              if (p1._id == p2._id) {\n                found += 1;\n              }\n            });\n          });\n          return found == 2;\n        });\n      }\n      if (index > -1) {\n        updated[index] = action.payload;\n      } else {\n        updated.push(action.payload);\n      }\n      return {\n        ...state,\n        channels: updated\n      };\n    case 'SET_MESSAGES':\n      return {\n        ...state,\n        messages: action.payload,\n        newMessageUpdate: false\n      };\n    case 'UPDATE_MESSAGES':\n      //var updated = [...state.channels]\n      //const i = state.channels.findIndex((channel) => channel._id === action.payload.channelId);\n      //updated[i].lastMessage = action.payload.message\n      return {\n        ...state,\n        //channels: updated,\n        messages: [...state.messages, action.payload],\n        newMessageUpdate: true\n      };\n    default:\n      return state;\n  }\n};\nexport const ChatContextProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(chatReducer, {\n    directTarget: '',\n    newMessageUpdate: false,\n    isRecent: true,\n    channels: [],\n    messages: []\n  });\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      ...state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatContextProvider, \"F6Z1dojcgyFYCF2bRa9C7KucMk0=\");\n_c = ChatContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatContextProvider\");","map":{"version":3,"names":["createContext","useReducer","jsxDEV","_jsxDEV","ChatContext","chatReducer","state","action","type","directTarget","payload","channels","isRecent","updated","index","findIndex","channel","_id","found","participants","forEach","p1","p2","push","messages","newMessageUpdate","ChatContextProvider","children","_s","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Yi Tao/Documents/GitHub/WorkSync-Orbital/frontend/src/context/ChatContext.js"],"sourcesContent":["import { createContext, useReducer } from \"react\"\r\n\r\nexport const ChatContext = createContext()\r\n\r\nexport const chatReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'SET_DIRECT':\r\n            return {\r\n                ...state,\r\n                directTarget: action.payload\r\n            }\r\n        case 'SET_CHANNELS':\r\n            return {\r\n                ...state,\r\n                channels: action.payload,\r\n                isRecent: action.isRecent\r\n            }\r\n        case 'UPDATE_CHANNEL':\r\n            var updated = [...state.channels]\r\n            let index = state.channels.findIndex((channel) => channel._id == action.payload._id);\r\n            if (index == -1 && action.payload.type == \"direct\") {\r\n                index = state.channels.findIndex(\r\n                    (channel) => {\r\n                        let found = 0\r\n                        channel.participants.forEach(p1 => {\r\n                            action.payload.participants.forEach(p2 => {\r\n                                if (p1._id == p2._id) {\r\n                                    found += 1\r\n                                }\r\n                            })\r\n                        })\r\n                        return found == 2\r\n                    }\r\n                );\r\n            }\r\n            if (index > -1) {\r\n                updated[index] = action.payload\r\n            } else {\r\n                updated.push(action.payload)\r\n            }\r\n            return {\r\n                ...state,\r\n                channels: updated,\r\n            }\r\n        case 'SET_MESSAGES':\r\n            return {\r\n                ...state,\r\n                messages: action.payload,\r\n                newMessageUpdate: false,\r\n            }\r\n        case 'UPDATE_MESSAGES':\r\n            //var updated = [...state.channels]\r\n            //const i = state.channels.findIndex((channel) => channel._id === action.payload.channelId);\r\n            //updated[i].lastMessage = action.payload.message\r\n            return {\r\n                ...state,\r\n                //channels: updated,\r\n                messages: [...state.messages, action.payload],\r\n                newMessageUpdate: true,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const ChatContextProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(chatReducer, {\r\n        directTarget: '',\r\n        newMessageUpdate: false,\r\n        isRecent: true,\r\n        channels: [],\r\n        messages: [],\r\n    })\r\n\r\n    return (\r\n        <ChatContext.Provider value={{...state, dispatch}}>\r\n            { children }\r\n        </ChatContext.Provider>\r\n    )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}