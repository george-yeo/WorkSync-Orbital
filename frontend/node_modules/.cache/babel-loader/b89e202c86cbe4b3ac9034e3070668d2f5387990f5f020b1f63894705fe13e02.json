{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yi Tao\\\\Documents\\\\GitHub\\\\WorkSync-Orbital\\\\frontend\\\\src\\\\pages\\\\Group.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useGroupContext } from \"../hooks/useGroupContext\";\nimport { useAuthContext } from \"../hooks/useAuthContext\";\nimport Modal from 'react-modal';\nimport GroupForm from \"../components/GroupForm\";\nimport GroupItem from \"../components/GroupItem\";\nimport Request from \"../components/Request\";\nimport JoinGroup from \"../components/JoinGroup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Group = () => {\n  _s();\n  const {\n    groups,\n    searchResults,\n    dispatch\n  } = useGroupContext();\n  const {\n    user\n  } = useAuthContext();\n  const [addUserStatus, setAddUserStatus] = useState(null);\n  const [isAddUserModalOpen, setIsAddUserModalOpen] = useState(false);\n  const [isAddGroupModalOpen, setIsAddGroupModalOpen] = useState(false);\n  const [isRemoveUserModalOpen, setIsRemoveUserModalOpen] = useState(false);\n  const [isDeleteGroupModalOpen, setIsDeleteGroupModalOpen] = useState(false);\n  const [usernameToAdd, setUsernameToAdd] = useState('');\n  const [usernameToRemove, setUsernameToRemove] = useState('');\n  const [selectedGroupId, setSelectedGroupId] = useState(null);\n  const [groupToDelete, setGroupToDelete] = useState(null);\n  const [sectionToDelete, setSectionToDelete] = useState(null);\n  //const [searchResults, setSearchResults] = useState([]);\n\n  useEffect(() => {\n    const fetchGroups = async () => {\n      if (!user) return;\n      try {\n        const response = await fetch(`/api/group`, {\n          headers: {\n            'Authorization': `Bearer ${user.token}`\n          }\n        });\n        const json = await response.json();\n        if (response.ok) {\n          dispatch({\n            type: 'SET_GROUPS',\n            payload: json\n          });\n        } else {\n          console.error(\"Error fetching groups:\", json.message);\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch groups:\", error);\n      }\n    };\n    if (user) {\n      fetchGroups();\n    }\n  }, [user, dispatch]);\n\n  // Handle Add User Button Click\n  const handleAddUserClick = groupId => {\n    setSelectedGroupId(groupId);\n    setIsAddUserModalOpen(true);\n    setAddUserStatus(null);\n    //setSearchResults([])\n  };\n\n  // Handle Add User Form Submit\n  const handleAddUserSubmit = async e => {\n    if (!user || !usernameToAdd) return;\n    try {\n      // Fetch the user ID based on the username to add\n      const response = await fetch(`/api/user/search/` + usernameToAdd, {\n        headers: {\n          'Authorization': `Bearer ${user.token}`\n        }\n      });\n      const json = await response.json();\n      if (json.length === 0) {\n        throw new Error(\"User not found\");\n      }\n      const userIDToAdd = json[0]._id;\n\n      // Add the user to the group\n      const responseAdd = await fetch(`/api/group/add/` + selectedGroupId, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${user.token}`\n        },\n        body: JSON.stringify({\n          user_id: userIDToAdd\n        })\n      });\n      const updatedGroup = await responseAdd.json();\n      if (responseAdd.ok) {\n        // Dispatch the updated group which should include both membersID and pendingID\n        dispatch({\n          type: 'UPDATE_GROUP',\n          payload: updatedGroup\n        });\n        setIsAddUserModalOpen(false);\n      } else {\n        console.error(\"Error adding user to group:\", updatedGroup.error);\n        setAddUserStatus({\n          success: false,\n          message: updatedGroup.error\n        });\n      }\n    } catch (error) {\n      console.error(\"Failed to add user to group:\", error);\n      setAddUserStatus({\n        success: false,\n        message: error.message\n      });\n    } finally {\n      setUsernameToAdd('');\n    }\n  };\n\n  // Handle Remove User Button Click\n  const handleRemoveUserClick = (groupId, username) => {\n    setSelectedGroupId(groupId);\n    setUsernameToRemove(username);\n    setIsRemoveUserModalOpen(true);\n  };\n\n  // Handle Remove User Confirmation\n  const handleRemoveUserSubmit = async () => {\n    if (!user || !usernameToRemove) return;\n    try {\n      // Fetch the user to get their ID\n      const response = await fetch(`/api/user/search/` + usernameToRemove, {\n        headers: {\n          'Authorization': `Bearer ${user.token}`\n        }\n      });\n      const json = await response.json();\n      if (!response.ok) {\n        throw new Error(\"Error finding user: \" + json.message);\n      }\n      const userIDToRemove = json[0]._id;\n\n      // Remove the user from the group\n      const responseRemove = await fetch(`api/group/remove/` + selectedGroupId, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${user.token}`\n        },\n        body: JSON.stringify({\n          user_id: userIDToRemove\n        })\n      });\n      const updatedGroup = await responseRemove.json();\n      if (responseRemove.ok) {\n        dispatch({\n          type: 'SET_GROUPS',\n          payload: updatedGroup\n        });\n        if (user._id === userIDToRemove) {\n          window.location.reload();\n        }\n      } else {\n        console.error(\"Error removing user from group:\", updatedGroup.error);\n      }\n    } catch (error) {\n      console.error(\"Failed to remove user from group:\", error);\n    } finally {\n      setIsRemoveUserModalOpen(false);\n      setUsernameToRemove('');\n    }\n  };\n\n  // Handle Delete Group Button Click\n  const handleDeleteGroupClick = (groupId, sectionID) => {\n    setGroupToDelete(groupId);\n    setSectionToDelete(sectionID);\n    setIsDeleteGroupModalOpen(true);\n  };\n  const handleDeleteGroupSubmit = async () => {\n    if (!user || !groupToDelete || !sectionToDelete) return;\n    try {\n      const responseDelete = await fetch(`/api/group/${sectionToDelete}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${user.token}`\n        }\n      });\n      if (!responseDelete.ok) {\n        console.error(\"Failed to delete group:\", responseDelete.statusText);\n      }\n\n      // Send DELETE request to API to delete the group\n      const response = await fetch(`/api/group/delete/` + groupToDelete, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${user.token}`\n        }\n      });\n      if (response.ok) {\n        // Remove the group from the state\n        dispatch({\n          type: 'DELETE_GROUP',\n          payload: groupToDelete\n        });\n        setIsDeleteGroupModalOpen(false);\n        window.location.reload();\n      } else {\n        console.error(\"Failed to delete group:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Failed to delete group:\", error);\n    }\n  };\n\n  // const handleSearchSubmit = async (e) => {\n  //     e.preventDefault();\n  //     if (!user || !usernameToAdd) return;\n\n  //     try {\n  //         const response = await fetch(`/api/user/search/${usernameToAdd}`, {\n  //             headers: { 'Authorization': `Bearer ${user.token}` }\n  //         });\n\n  //         const json = await response.json();\n\n  //         if (response.ok) {\n  //             setSearchResults(json);\n  //         } else {\n  //             console.error(\"Error searching user:\", json.message);\n  //         }\n  //     } catch (error) {\n  //         console.error(\"Failed to search user:\", error);\n  //     }\n  // };\n\n  let groupsList = [];\n  if (searchResults != null) {\n    groupsList = searchResults;\n  } else if (groups != null) {\n    groupsList = groups;\n  }\n  groupsList.filter(group => group.createdByID._id == user._id || group.requestID.some(u => u._id == user._id) || group.membersID.some(u => u._id == user._id));\n\n  // if (groups == null) {\n  //     groupsList = (\n  //         <div>\n  //             Loading groups...\n  //         </div>\n  //     )\n  // } else if (groups && searchResults == null) {\n  //     groupsList = groups.sort((a, b) => a.name < b.name ? -1 : 1).length > 0 ? (\n  //         groups.map((group) => (\n  //             <GroupItem group={group}/>\n  //         ))\n  //     ) : (\n  //         <p>No groups to display</p>\n  //     )\n  // } else if (searchResults) {\n  //     groupsList = searchResults.length > 0 ? (\n  //         searchResults.sort((a, b) => a.name < b.name ? -1 : 1).map((group) => (\n  //             <GroupItem group={group}/>\n  //         ))\n  //     ) : (\n  //         <p>No groups to display</p>\n  //     )\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"groups\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"groups-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: searchResults == null ? \"My Groups\" : \"Search Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create add-btn\",\n          onClick: () => setIsAddGroupModalOpen(true),\n          children: [\"Create\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"material-symbols-outlined\",\n            children: \"create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(GroupForm, {\n          isOpen: isAddGroupModalOpen,\n          setIsOpen: setIsAddGroupModalOpen,\n          onGroupCreated: newGroup => dispatch({\n            type: 'CREATE_GROUP',\n            payload: newGroup\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(JoinGroup, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"groups-list\",\n      children: groupsList.length > 0 ? groupsList.sort((a, b) => a.name < b.name ? -1 : 1).map(group => /*#__PURE__*/_jsxDEV(GroupItem, {\n        group: group\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No groups to display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"request-list\",\n      children: /*#__PURE__*/_jsxDEV(Request, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 9\n  }, this);\n};\n_s(Group, \"C3Aic3KlTlcZGwZ90yLf+rh00oI=\", false, function () {\n  return [useGroupContext, useAuthContext];\n});\n_c = Group;\nexport default Group;\n\n// {/* Add User Modal */}\n// <Modal\n// isOpen={isAddUserModalOpen}\n// onRequestClose={() => setIsAddUserModalOpen(false)}\n// contentLabel=\"Add User to Group\"\n// className=\"addUser-popup-form\"\n// overlayClassName=\"custom-modal-overlay\"\n// ariaHideApp={false}\n// >\n// <h2>Add User to Group</h2>\n// <span className=\"close-btn\" onClick={() => setIsAddUserModalOpen(false)}>&times;</span>\n// <form onSubmit={handleSearchSubmit}>\n//     <label>\n//         Username:\n//         <input\n//             type=\"text\"\n//             value={usernameToAdd}\n//             onChange={(e) => setUsernameToAdd(e.target.value)}\n//             required\n//         />\n//     </label>\n//     <div className=\"modal-buttons\">\n//         <button type=\"submit\">Search</button>\n//     </div>\n// </form>\n\n// {/* Display search results */}\n// {searchResults.length > 0 && (\n//     <div className=\"search-results\">\n//         <h3>Search Results:</h3>\n//         <div>\n//             {searchResults.map(user => (\n//                 <p key={user._id}>\n//                     {user.username}\n//                     <button className=\"join-group-btn\" onClick={() => handleAddUserSubmit(user.username)}>Add</button>\n//                 </p>\n//             ))}\n//         </div>\n//     </div>\n// )}\n// {addUserStatus && (\n//     <div className={`status-message ${addUserStatus.success ? 'success' : 'error'}`}>\n//         {addUserStatus.message}\n//     </div>\n// )}\n// </Modal>\n// {/* Remove User Confirmation Modal */}\n// <Modal\n// isOpen={isRemoveUserModalOpen}\n// onRequestClose={() => setIsRemoveUserModalOpen(false)}\n// contentLabel=\"Confirm Remove User\"\n// className=\"removeUser-popup-form\"\n// ariaHideApp={false}\n// >\n// <h2>Confirm Remove Member</h2>\n// <span className=\"close-btn\" onClick={() => setIsRemoveUserModalOpen(false)}>&times;</span>\n// <p>Are you sure you want to remove <strong>{usernameToRemove}</strong> from the group?</p>\n// <div className=\"modal-buttons\">\n//     <button onClick={handleRemoveUserSubmit}>Yes, Remove</button>\n// </div>\n// </Modal>\n\n// {/* Delete Group Confirmation Modal */}\n// <Modal\n// isOpen={isDeleteGroupModalOpen}\n// onRequestClose={() => setIsDeleteGroupModalOpen(false)}\n// contentLabel=\"Confirm Delete Group\"\n// className=\"deleteGroup-popup-form\"\n// ariaHideApp={false}\n// >\n// <h2>Confirm Delete Group</h2>\n// <span className=\"close-btn\" onClick={() => setIsDeleteGroupModalOpen(false)}>&times;</span>\n// <p>Are you sure you want to delete this group?</p>\n// <div className=\"modal-buttons\">\n//     <button onClick={handleDeleteGroupSubmit}>Yes, Delete</button>\n// </div>\n// </Modal>\nvar _c;\n$RefreshReg$(_c, \"Group\");","map":{"version":3,"names":["useEffect","useState","useGroupContext","useAuthContext","Modal","GroupForm","GroupItem","Request","JoinGroup","jsxDEV","_jsxDEV","Group","_s","groups","searchResults","dispatch","user","addUserStatus","setAddUserStatus","isAddUserModalOpen","setIsAddUserModalOpen","isAddGroupModalOpen","setIsAddGroupModalOpen","isRemoveUserModalOpen","setIsRemoveUserModalOpen","isDeleteGroupModalOpen","setIsDeleteGroupModalOpen","usernameToAdd","setUsernameToAdd","usernameToRemove","setUsernameToRemove","selectedGroupId","setSelectedGroupId","groupToDelete","setGroupToDelete","sectionToDelete","setSectionToDelete","fetchGroups","response","fetch","headers","token","json","ok","type","payload","console","error","message","handleAddUserClick","groupId","handleAddUserSubmit","e","length","Error","userIDToAdd","_id","responseAdd","method","body","JSON","stringify","user_id","updatedGroup","success","handleRemoveUserClick","username","handleRemoveUserSubmit","userIDToRemove","responseRemove","window","location","reload","handleDeleteGroupClick","sectionID","handleDeleteGroupSubmit","responseDelete","statusText","groupsList","filter","group","createdByID","requestID","some","u","membersID","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isOpen","setIsOpen","onGroupCreated","newGroup","sort","a","b","name","map","_c","$RefreshReg$"],"sources":["C:/Users/Yi Tao/Documents/GitHub/WorkSync-Orbital/frontend/src/pages/Group.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useGroupContext } from \"../hooks/useGroupContext\";\r\nimport { useAuthContext } from \"../hooks/useAuthContext\";\r\nimport Modal from 'react-modal';\r\n\r\nimport GroupForm from \"../components/GroupForm\";\r\nimport GroupItem from \"../components/GroupItem\";\r\nimport Request from \"../components/Request\";\r\nimport JoinGroup from \"../components/JoinGroup\";\r\n\r\nconst Group = () => {\r\n    const { groups, searchResults, dispatch } = useGroupContext();\r\n    const { user } = useAuthContext();\r\n    const [addUserStatus, setAddUserStatus] = useState(null);\r\n    const [isAddUserModalOpen, setIsAddUserModalOpen] = useState(false);\r\n    const [isAddGroupModalOpen, setIsAddGroupModalOpen] = useState(false);\r\n    const [isRemoveUserModalOpen, setIsRemoveUserModalOpen] = useState(false);\r\n    const [isDeleteGroupModalOpen, setIsDeleteGroupModalOpen] = useState(false);\r\n    const [usernameToAdd, setUsernameToAdd] = useState('');\r\n    const [usernameToRemove, setUsernameToRemove] = useState('');\r\n    const [selectedGroupId, setSelectedGroupId] = useState(null);\r\n    const [groupToDelete, setGroupToDelete] = useState(null);\r\n    const [sectionToDelete, setSectionToDelete] = useState(null);\r\n    //const [searchResults, setSearchResults] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchGroups = async () => {\r\n            if (!user) return;\r\n\r\n            try {\r\n                const response = await fetch(`/api/group`, {\r\n                    headers: { 'Authorization': `Bearer ${user.token}` },\r\n                });\r\n\r\n                const json = await response.json();\r\n\r\n                if (response.ok) {\r\n                    dispatch({ type: 'SET_GROUPS', payload: json });\r\n                } else {\r\n                    console.error(\"Error fetching groups:\", json.message);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch groups:\", error);\r\n            }\r\n        };\r\n\r\n        if (user) {\r\n            fetchGroups();\r\n        }\r\n    }, [user, dispatch]);\r\n\r\n    // Handle Add User Button Click\r\n    const handleAddUserClick = (groupId) => {\r\n        setSelectedGroupId(groupId);\r\n        setIsAddUserModalOpen(true);\r\n        setAddUserStatus(null);\r\n        //setSearchResults([])\r\n    };\r\n\r\n    // Handle Add User Form Submit\r\n    const handleAddUserSubmit = async (e) => {\r\n        if (!user || !usernameToAdd) return;\r\n\r\n        try {\r\n            // Fetch the user ID based on the username to add\r\n            const response = await fetch(`/api/user/search/` + usernameToAdd, {\r\n                headers: { 'Authorization': `Bearer ${user.token}` }\r\n            });\r\n\r\n            const json = await response.json();\r\n            if (json.length === 0) {\r\n                throw new Error(\"User not found\");\r\n            }\r\n\r\n            const userIDToAdd = json[0]._id;\r\n\r\n            // Add the user to the group\r\n            const responseAdd = await fetch(`/api/group/add/` + selectedGroupId, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${user.token}`\r\n                },\r\n                body: JSON.stringify({ user_id: userIDToAdd })\r\n            });\r\n\r\n            const updatedGroup = await responseAdd.json();\r\n            \r\n            if (responseAdd.ok) {\r\n                // Dispatch the updated group which should include both membersID and pendingID\r\n                dispatch({ type: 'UPDATE_GROUP', payload: updatedGroup });\r\n                setIsAddUserModalOpen(false);\r\n            } else {\r\n                console.error(\"Error adding user to group:\", updatedGroup.error);\r\n                setAddUserStatus({ success: false, message: updatedGroup.error });\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to add user to group:\", error);\r\n            setAddUserStatus({ success: false, message: error.message });\r\n        } finally {          \r\n            setUsernameToAdd('');\r\n        }\r\n    };\r\n\r\n\r\n    // Handle Remove User Button Click\r\n    const handleRemoveUserClick = (groupId, username) => {\r\n        setSelectedGroupId(groupId);\r\n        setUsernameToRemove(username);\r\n        setIsRemoveUserModalOpen(true);\r\n    };\r\n\r\n    // Handle Remove User Confirmation\r\n    const handleRemoveUserSubmit = async () => {\r\n        if (!user || !usernameToRemove) return;\r\n\r\n        try {\r\n            // Fetch the user to get their ID\r\n            const response = await fetch(`/api/user/search/` + usernameToRemove, {\r\n                headers: { 'Authorization': `Bearer ${user.token}` }\r\n            });\r\n\r\n            const json = await response.json();\r\n            if (!response.ok) {\r\n                throw new Error(\"Error finding user: \" + json.message);\r\n            }\r\n\r\n            const userIDToRemove = json[0]._id;\r\n\r\n            // Remove the user from the group\r\n            const responseRemove = await fetch(`api/group/remove/` + selectedGroupId, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${user.token}`\r\n                },\r\n                body: JSON.stringify({ user_id: userIDToRemove })\r\n            });\r\n\r\n            const updatedGroup = await responseRemove.json();\r\n            if (responseRemove.ok) {\r\n                dispatch({ type: 'SET_GROUPS', payload: updatedGroup });\r\n                if (user._id === userIDToRemove){\r\n                    window.location.reload()\r\n                } \r\n            } else {\r\n                console.error(\"Error removing user from group:\", updatedGroup.error);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to remove user from group:\", error);\r\n        } finally {\r\n            setIsRemoveUserModalOpen(false);\r\n            setUsernameToRemove('');\r\n        }\r\n    };\r\n\r\n    // Handle Delete Group Button Click\r\n    const handleDeleteGroupClick = (groupId, sectionID) => {\r\n        setGroupToDelete(groupId);\r\n        setSectionToDelete(sectionID)\r\n        setIsDeleteGroupModalOpen(true);\r\n    };\r\n\r\n    const handleDeleteGroupSubmit = async () => {\r\n        if (!user || !groupToDelete || !sectionToDelete) return;\r\n\r\n        try {\r\n            const responseDelete = await fetch(`/api/group/${sectionToDelete}`, {\r\n                method: 'DELETE',\r\n                headers: { 'Authorization': `Bearer ${user.token}` }\r\n            })\r\n\r\n            if (!responseDelete.ok) {\r\n                console.error(\"Failed to delete group:\", responseDelete.statusText);\r\n            }\r\n\r\n            // Send DELETE request to API to delete the group\r\n            const response = await fetch(`/api/group/delete/` + groupToDelete, {\r\n                method: 'DELETE',\r\n                headers: { 'Authorization': `Bearer ${user.token}` }\r\n            });\r\n\r\n            if (response.ok) {\r\n                // Remove the group from the state\r\n                dispatch({ type: 'DELETE_GROUP', payload: groupToDelete });\r\n                setIsDeleteGroupModalOpen(false);\r\n                window.location.reload()\r\n            } else {\r\n                console.error(\"Failed to delete group:\", response.statusText);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to delete group:\", error);\r\n        }\r\n    };\r\n\r\n    // const handleSearchSubmit = async (e) => {\r\n    //     e.preventDefault();\r\n    //     if (!user || !usernameToAdd) return;\r\n\r\n    //     try {\r\n    //         const response = await fetch(`/api/user/search/${usernameToAdd}`, {\r\n    //             headers: { 'Authorization': `Bearer ${user.token}` }\r\n    //         });\r\n\r\n    //         const json = await response.json();\r\n\r\n    //         if (response.ok) {\r\n    //             setSearchResults(json);\r\n    //         } else {\r\n    //             console.error(\"Error searching user:\", json.message);\r\n    //         }\r\n    //     } catch (error) {\r\n    //         console.error(\"Failed to search user:\", error);\r\n    //     }\r\n    // };\r\n\r\n    let groupsList = []\r\n    \r\n    if (searchResults != null) {\r\n        groupsList = searchResults\r\n    } else if (groups != null) {\r\n        groupsList = groups\r\n    }\r\n\r\n    groupsList.filter(group => group.createdByID._id == user._id || group.requestID.some(u => u._id == user._id) || group.membersID.some(u => u._id == user._id))\r\n    \r\n    // if (groups == null) {\r\n    //     groupsList = (\r\n    //         <div>\r\n    //             Loading groups...\r\n    //         </div>\r\n    //     )\r\n    // } else if (groups && searchResults == null) {\r\n    //     groupsList = groups.sort((a, b) => a.name < b.name ? -1 : 1).length > 0 ? (\r\n    //         groups.map((group) => (\r\n    //             <GroupItem group={group}/>\r\n    //         ))\r\n    //     ) : (\r\n    //         <p>No groups to display</p>\r\n    //     )\r\n    // } else if (searchResults) {\r\n    //     groupsList = searchResults.length > 0 ? (\r\n    //         searchResults.sort((a, b) => a.name < b.name ? -1 : 1).map((group) => (\r\n    //             <GroupItem group={group}/>\r\n    //         ))\r\n    //     ) : (\r\n    //         <p>No groups to display</p>\r\n    //     )\r\n    // }\r\n\r\n    return (\r\n        <div className=\"groups\">\r\n            <div className=\"groups-header\">\r\n                <div className=\"top\">\r\n                    <h1>{searchResults == null ? \"My Groups\" : \"Search Results\"}</h1>\r\n                    <button className=\"create add-btn\" onClick={()=>setIsAddGroupModalOpen(true)}>\r\n                        Create\r\n                        <span className=\"material-symbols-outlined\">create</span>\r\n                    </button>\r\n                    <GroupForm isOpen={isAddGroupModalOpen} setIsOpen={setIsAddGroupModalOpen} onGroupCreated={(newGroup) => dispatch({ type: 'CREATE_GROUP', payload: newGroup })} />\r\n                </div>\r\n                <JoinGroup/>\r\n            </div>\r\n            <div className=\"groups-list\">\r\n                {/* <GroupForm onGroupCreated={(newGroup) => dispatch({ type: 'CREATE_GROUP', payload: newGroup })} /> */}\r\n                {groupsList.length > 0 ? (\r\n                    groupsList.sort((a, b) => a.name < b.name ? -1 : 1).map((group) => (\r\n                        <GroupItem group={group}/>\r\n                    ))\r\n                ) : (\r\n                    <p>No groups to display</p>\r\n                )}\r\n            </div>\r\n            <div className=\"request-list\">\r\n                <Request />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Group;\r\n\r\n// {/* Add User Modal */}\r\n// <Modal\r\n// isOpen={isAddUserModalOpen}\r\n// onRequestClose={() => setIsAddUserModalOpen(false)}\r\n// contentLabel=\"Add User to Group\"\r\n// className=\"addUser-popup-form\"\r\n// overlayClassName=\"custom-modal-overlay\"\r\n// ariaHideApp={false}\r\n// >\r\n// <h2>Add User to Group</h2>\r\n// <span className=\"close-btn\" onClick={() => setIsAddUserModalOpen(false)}>&times;</span>\r\n// <form onSubmit={handleSearchSubmit}>\r\n//     <label>\r\n//         Username:\r\n//         <input\r\n//             type=\"text\"\r\n//             value={usernameToAdd}\r\n//             onChange={(e) => setUsernameToAdd(e.target.value)}\r\n//             required\r\n//         />\r\n//     </label>\r\n//     <div className=\"modal-buttons\">\r\n//         <button type=\"submit\">Search</button>\r\n//     </div>\r\n// </form>\r\n\r\n// {/* Display search results */}\r\n// {searchResults.length > 0 && (\r\n//     <div className=\"search-results\">\r\n//         <h3>Search Results:</h3>\r\n//         <div>\r\n//             {searchResults.map(user => (\r\n//                 <p key={user._id}>\r\n//                     {user.username}\r\n//                     <button className=\"join-group-btn\" onClick={() => handleAddUserSubmit(user.username)}>Add</button>\r\n//                 </p>\r\n//             ))}\r\n//         </div>\r\n//     </div>\r\n// )}\r\n// {addUserStatus && (\r\n//     <div className={`status-message ${addUserStatus.success ? 'success' : 'error'}`}>\r\n//         {addUserStatus.message}\r\n//     </div>\r\n// )}\r\n// </Modal>\r\n// {/* Remove User Confirmation Modal */}\r\n// <Modal\r\n// isOpen={isRemoveUserModalOpen}\r\n// onRequestClose={() => setIsRemoveUserModalOpen(false)}\r\n// contentLabel=\"Confirm Remove User\"\r\n// className=\"removeUser-popup-form\"\r\n// ariaHideApp={false}\r\n// >\r\n// <h2>Confirm Remove Member</h2>\r\n// <span className=\"close-btn\" onClick={() => setIsRemoveUserModalOpen(false)}>&times;</span>\r\n// <p>Are you sure you want to remove <strong>{usernameToRemove}</strong> from the group?</p>\r\n// <div className=\"modal-buttons\">\r\n//     <button onClick={handleRemoveUserSubmit}>Yes, Remove</button>\r\n// </div>\r\n// </Modal>\r\n\r\n// {/* Delete Group Confirmation Modal */}\r\n// <Modal\r\n// isOpen={isDeleteGroupModalOpen}\r\n// onRequestClose={() => setIsDeleteGroupModalOpen(false)}\r\n// contentLabel=\"Confirm Delete Group\"\r\n// className=\"deleteGroup-popup-form\"\r\n// ariaHideApp={false}\r\n// >\r\n// <h2>Confirm Delete Group</h2>\r\n// <span className=\"close-btn\" onClick={() => setIsDeleteGroupModalOpen(false)}>&times;</span>\r\n// <p>Are you sure you want to delete this group?</p>\r\n// <div className=\"modal-buttons\">\r\n//     <button onClick={handleDeleteGroupSubmit}>Yes, Delete</button>\r\n// </div>\r\n// </Modal>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}