{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yi Tao\\\\Documents\\\\GitHub\\\\WorkSync-Orbital\\\\frontend\\\\src\\\\pages\\\\Group.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useGroupContext } from \"../hooks/useGroupContext\";\nimport { useAuthContext } from \"../hooks/useAuthContext\";\nimport GroupForm from \"../components/GroupForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Group = () => {\n  _s();\n  const {\n    groups,\n    dispatch\n  } = useGroupContext();\n  const {\n    user\n  } = useAuthContext();\n  const [groupMembers, setGroupMembers] = useState({}); // State to store member usernames\n\n  useEffect(() => {\n    const fetchGroups = async () => {\n      if (!user) return;\n      try {\n        const response = await fetch(`/api/group`, {\n          headers: {\n            'Authorization': `Bearer ${user.token}`\n          }\n        });\n        const json = await response.json();\n        if (response.ok) {\n          dispatch({\n            type: 'SET_GROUPS',\n            payload: json\n          });\n          // Fetch usernames for each group after fetching groups\n          await fetchGroupMembers(json);\n        } else {\n          console.error(\"Error fetching groups:\", json.message);\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch groups:\", error);\n      }\n    };\n    const fetchGroupMembers = async groups => {\n      const membersData = {};\n      for (const group of groups) {\n        const memberPromises = group.members.map(memberId => fetch(`/api/user/getUser/${memberId}`, {\n          headers: {\n            'Authorization': `Bearer ${user.token}`\n          }\n        }).then(response => response.json()));\n        const members = await Promise.all(memberPromises);\n        console.log(members[0][1].username);\n        membersData[group._id] = members[0].map(member => member.username);\n      }\n\n      // Update the state with the fetched member usernames\n      setGroupMembers(membersData);\n    };\n    if (user) {\n      fetchGroups();\n    }\n  }, [user, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GroupForm, {\n      onGroupCreated: newGroup => dispatch({\n        type: 'CREATE_GROUP',\n        payload: newGroup\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"groups-list\",\n      children: groups ? groups.length > 0 ? groups.map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: group.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Members:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: groupMembers[group._id] ? groupMembers[group._id].map((username, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 45\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading members...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 29\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No groups to display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading groups...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(Group, \"8b5oXTVfBw1Ra3IUWRZibrSTyvw=\", false, function () {\n  return [useGroupContext, useAuthContext];\n});\n_c = Group;\nexport default Group;\nvar _c;\n$RefreshReg$(_c, \"Group\");","map":{"version":3,"names":["useEffect","useState","useGroupContext","useAuthContext","GroupForm","jsxDEV","_jsxDEV","Group","_s","groups","dispatch","user","groupMembers","setGroupMembers","fetchGroups","response","fetch","headers","token","json","ok","type","payload","fetchGroupMembers","console","error","message","membersData","group","memberPromises","members","map","memberId","then","Promise","all","log","username","_id","member","children","onGroupCreated","newGroup","fileName","_jsxFileName","lineNumber","columnNumber","className","length","name","index","_c","$RefreshReg$"],"sources":["C:/Users/Yi Tao/Documents/GitHub/WorkSync-Orbital/frontend/src/pages/Group.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useGroupContext } from \"../hooks/useGroupContext\";\r\nimport { useAuthContext } from \"../hooks/useAuthContext\";\r\n\r\nimport GroupForm from \"../components/GroupForm\";\r\n\r\nconst Group = () => {\r\n    const { groups, dispatch } = useGroupContext();\r\n    const { user } = useAuthContext();\r\n    const [groupMembers, setGroupMembers] = useState({}); // State to store member usernames\r\n\r\n    useEffect(() => {\r\n        const fetchGroups = async () => {\r\n            if (!user) return;\r\n    \r\n            try {\r\n                const response = await fetch(`/api/group`, {\r\n                    headers: {'Authorization': `Bearer ${user.token}`},\r\n                });\r\n    \r\n                const json = await response.json();\r\n    \r\n                if (response.ok) {\r\n                    dispatch({ type: 'SET_GROUPS', payload: json });\r\n                    // Fetch usernames for each group after fetching groups\r\n                    await fetchGroupMembers(json);\r\n                } else {\r\n                    console.error(\"Error fetching groups:\", json.message);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch groups:\", error);\r\n            }\r\n        };\r\n\r\n        const fetchGroupMembers = async (groups) => {\r\n            const membersData = {};\r\n\r\n            for (const group of groups) {\r\n                const memberPromises = group.members.map(memberId => \r\n                    fetch(`/api/user/getUser/${memberId}`, {\r\n                        headers: {'Authorization': `Bearer ${user.token}`}\r\n                    }).then(response => response.json())\r\n                );\r\n                \r\n                const members = await Promise.all(memberPromises);\r\n                console.log(members[0][1].username)\r\n                membersData[group._id] = members[0].map(member => member.username);\r\n            }\r\n\r\n            \r\n\r\n            // Update the state with the fetched member usernames\r\n            setGroupMembers(membersData);\r\n        };\r\n\r\n        if (user) {\r\n            fetchGroups();\r\n        }\r\n    }, [user, dispatch]);\r\n\r\n    return (\r\n        <div>\r\n            <GroupForm onGroupCreated={(newGroup) => dispatch({ type: 'CREATE_GROUP', payload: newGroup })} />\r\n            <div className=\"groups-list\">\r\n                {groups ? (\r\n                    groups.length > 0 ? (\r\n                        groups.map((group) => (\r\n                            <div className=\"group-item\">\r\n                                <h3>{group.name}</h3>\r\n                                <h4>Members:</h4>\r\n                                <ul>\r\n                                    {groupMembers[group._id] ? (\r\n                                        groupMembers[group._id].map((username, index) => (\r\n                                            <div>{username}</div>\r\n                                        ))\r\n                                    ) : (\r\n                                        <p>Loading members...</p>\r\n                                    )}\r\n                                </ul>\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <p>No groups to display</p>\r\n                    )\r\n                ) : (\r\n                    <p>Loading groups...</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Group;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}